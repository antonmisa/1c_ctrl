// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antonmisa/1cctl/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Ctrl is an autogenerated mock type for the Ctrl type
type Ctrl struct {
	mock.Mock
}

// Clusters provides a mock function with given fields: ctx, entrypoint, args
func (_m *Ctrl) Clusters(ctx context.Context, entrypoint string, args map[string]interface{}) ([]entity.Cluster, error) {
	ret := _m.Called(ctx, entrypoint, args)

	var r0 []entity.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) ([]entity.Cluster, error)); ok {
		return rf(ctx, entrypoint, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) []entity.Cluster); ok {
		r0 = rf(ctx, entrypoint, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, entrypoint, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connections provides a mock function with given fields: ctx, entrypoint, cluster, clusterCred, infobase, args
func (_m *Ctrl) Connections(ctx context.Context, entrypoint string, cluster entity.Cluster, clusterCred entity.Credentials, infobase entity.Infobase, args map[string]interface{}) ([]entity.Connection, error) {
	ret := _m.Called(ctx, entrypoint, cluster, clusterCred, infobase, args)

	var r0 []entity.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Credentials, entity.Infobase, map[string]interface{}) ([]entity.Connection, error)); ok {
		return rf(ctx, entrypoint, cluster, clusterCred, infobase, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Credentials, entity.Infobase, map[string]interface{}) []entity.Connection); ok {
		r0 = rf(ctx, entrypoint, cluster, clusterCred, infobase, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Cluster, entity.Credentials, entity.Infobase, map[string]interface{}) error); ok {
		r1 = rf(ctx, entrypoint, cluster, clusterCred, infobase, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Infobases provides a mock function with given fields: ctx, entrypoint, cluster, clusterCred, args
func (_m *Ctrl) Infobases(ctx context.Context, entrypoint string, cluster entity.Cluster, clusterCred entity.Credentials, args map[string]interface{}) ([]entity.Infobase, error) {
	ret := _m.Called(ctx, entrypoint, cluster, clusterCred, args)

	var r0 []entity.Infobase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Credentials, map[string]interface{}) ([]entity.Infobase, error)); ok {
		return rf(ctx, entrypoint, cluster, clusterCred, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Credentials, map[string]interface{}) []entity.Infobase); ok {
		r0 = rf(ctx, entrypoint, cluster, clusterCred, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Infobase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Cluster, entity.Credentials, map[string]interface{}) error); ok {
		r1 = rf(ctx, entrypoint, cluster, clusterCred, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sessions provides a mock function with given fields: ctx, entrypoint, cluster, clusterCred, infobase, args
func (_m *Ctrl) Sessions(ctx context.Context, entrypoint string, cluster entity.Cluster, clusterCred entity.Credentials, infobase entity.Infobase, args map[string]interface{}) ([]entity.Session, error) {
	ret := _m.Called(ctx, entrypoint, cluster, clusterCred, infobase, args)

	var r0 []entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Credentials, entity.Infobase, map[string]interface{}) ([]entity.Session, error)); ok {
		return rf(ctx, entrypoint, cluster, clusterCred, infobase, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Credentials, entity.Infobase, map[string]interface{}) []entity.Session); ok {
		r0 = rf(ctx, entrypoint, cluster, clusterCred, infobase, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Cluster, entity.Credentials, entity.Infobase, map[string]interface{}) error); ok {
		r1 = rf(ctx, entrypoint, cluster, clusterCred, infobase, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCtrl creates a new instance of Ctrl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCtrl(t interface {
	mock.TestingT
	Cleanup(func())
}) *Ctrl {
	mock := &Ctrl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
