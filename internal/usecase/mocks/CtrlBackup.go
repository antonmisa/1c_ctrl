// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antonmisa/1cctl/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// CtrlBackup is an autogenerated mock type for the CtrlBackup type
type CtrlBackup struct {
	mock.Mock
}

// RunBackup provides a mock function with given fields: ctx, cluster, infobase, infobaseCred, lockCode, outputPath
func (_m *CtrlBackup) RunBackup(ctx context.Context, cluster entity.Cluster, infobase entity.Infobase, infobaseCred entity.Credentials, lockCode string, outputPath string) error {
	ret := _m.Called(ctx, cluster, infobase, infobaseCred, lockCode, outputPath)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Cluster, entity.Infobase, entity.Credentials, string, string) error); ok {
		r0 = rf(ctx, cluster, infobase, infobaseCred, lockCode, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCtrlBackup creates a new instance of CtrlBackup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCtrlBackup(t interface {
	mock.TestingT
	Cleanup(func())
}) *CtrlBackup {
	mock := &CtrlBackup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
