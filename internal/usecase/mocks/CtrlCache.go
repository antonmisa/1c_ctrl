// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/antonmisa/1cctl/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// CtrlCache is an autogenerated mock type for the CtrlCache type
type CtrlCache struct {
	mock.Mock
}

// GetClusters provides a mock function with given fields: ctx, entrypoint
func (_m *CtrlCache) GetClusters(ctx context.Context, entrypoint string) ([]entity.Cluster, error) {
	ret := _m.Called(ctx, entrypoint)

	var r0 []entity.Cluster
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.Cluster, error)); ok {
		return rf(ctx, entrypoint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Cluster); ok {
		r0 = rf(ctx, entrypoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Cluster)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entrypoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnections provides a mock function with given fields: ctx, entrypoint, cluster, infobase
func (_m *CtrlCache) GetConnections(ctx context.Context, entrypoint string, cluster entity.Cluster, infobase entity.Infobase) ([]entity.Connection, error) {
	ret := _m.Called(ctx, entrypoint, cluster, infobase)

	var r0 []entity.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Infobase) ([]entity.Connection, error)); ok {
		return rf(ctx, entrypoint, cluster, infobase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Infobase) []entity.Connection); ok {
		r0 = rf(ctx, entrypoint, cluster, infobase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Cluster, entity.Infobase) error); ok {
		r1 = rf(ctx, entrypoint, cluster, infobase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInfobases provides a mock function with given fields: ctx, entrypoint, cluster
func (_m *CtrlCache) GetInfobases(ctx context.Context, entrypoint string, cluster entity.Cluster) ([]entity.Infobase, error) {
	ret := _m.Called(ctx, entrypoint, cluster)

	var r0 []entity.Infobase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster) ([]entity.Infobase, error)); ok {
		return rf(ctx, entrypoint, cluster)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster) []entity.Infobase); ok {
		r0 = rf(ctx, entrypoint, cluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Infobase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Cluster) error); ok {
		r1 = rf(ctx, entrypoint, cluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: ctx, entrypoint, cluster, infobase
func (_m *CtrlCache) GetSessions(ctx context.Context, entrypoint string, cluster entity.Cluster, infobase entity.Infobase) ([]entity.Session, error) {
	ret := _m.Called(ctx, entrypoint, cluster, infobase)

	var r0 []entity.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Infobase) ([]entity.Session, error)); ok {
		return rf(ctx, entrypoint, cluster, infobase)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Infobase) []entity.Session); ok {
		r0 = rf(ctx, entrypoint, cluster, infobase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.Cluster, entity.Infobase) error); ok {
		r1 = rf(ctx, entrypoint, cluster, infobase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutClusters provides a mock function with given fields: ctx, entrypoint, clusters
func (_m *CtrlCache) PutClusters(ctx context.Context, entrypoint string, clusters []entity.Cluster) error {
	ret := _m.Called(ctx, entrypoint, clusters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []entity.Cluster) error); ok {
		r0 = rf(ctx, entrypoint, clusters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutConnections provides a mock function with given fields: ctx, entrypoint, cluster, infobase, connections
func (_m *CtrlCache) PutConnections(ctx context.Context, entrypoint string, cluster entity.Cluster, infobase entity.Infobase, connections []entity.Connection) error {
	ret := _m.Called(ctx, entrypoint, cluster, infobase, connections)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Infobase, []entity.Connection) error); ok {
		r0 = rf(ctx, entrypoint, cluster, infobase, connections)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutInfobases provides a mock function with given fields: ctx, entrypoint, cluster, infobases
func (_m *CtrlCache) PutInfobases(ctx context.Context, entrypoint string, cluster entity.Cluster, infobases []entity.Infobase) error {
	ret := _m.Called(ctx, entrypoint, cluster, infobases)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, []entity.Infobase) error); ok {
		r0 = rf(ctx, entrypoint, cluster, infobases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutSessions provides a mock function with given fields: ctx, entrypoint, cluster, infobase, sessions
func (_m *CtrlCache) PutSessions(ctx context.Context, entrypoint string, cluster entity.Cluster, infobase entity.Infobase, sessions []entity.Session) error {
	ret := _m.Called(ctx, entrypoint, cluster, infobase, sessions)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.Cluster, entity.Infobase, []entity.Session) error); ok {
		r0 = rf(ctx, entrypoint, cluster, infobase, sessions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCtrlCache creates a new instance of CtrlCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCtrlCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *CtrlCache {
	mock := &CtrlCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
